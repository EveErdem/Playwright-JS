How to record test - Test Generator
Playwright comes with a tool - Codegen also called Test Generator
Can be used to record test and generate test scripts
It Opens 2 windows
A browser window to interacts with the website
Playwright Inspector window to record test

00:00 Intro

01:18 What is Codegen

02:14 Step 1 - Open terminal and run codegen   npx playwright codegen

03:04 Step 2 - Check 2 windows open - Browser and Playwright Inspector

04:57 Step 3 - Record your test steps and check the test scripts getting created

06:43 Step 4 - Save the recorded script in a test file | Run and check

10:40 Can also add the url npx playwright codegen google.com

11:48 See all options  npx playwright codegen --help

13:33 Screenshot moment

13:54 Record on a specific browser (default:chromium) npx playwright codegen --browser firefox

15:32 Record and save to a file  npx playwright codegen --target javascript -o record_example.js

21:27 Set viewport - screen resolution (size)  npx playwright codegen --viewport-size=800,600

22:52 Emulate devices  npx playwright codegen --device="iPhone 11"

25:15 Emulate color scheme (if available) npx playwright codegen --color-scheme=dark

27:26 Screenshot moment

npx playwright codegen --target javascript -o .\tests\demorecord2.spec.js
npx playwright codegen --viewport-size=800,600
npx playwright test demorecord01.spec.js -g "test$
npx playwright test demorecord2.spec.js -g "record2$"
npx playwright codegen --device="iPhone 11" 
npx playwright codegen --help
 codegen 
 Options:
  -o, --output <file name>        saves the generated script to a file
  --target <language>             language to generate, one of javascript, test, python, python-async, pytest, csharp, csharp-mstest, csharp-nunit, java (default: "test")
  --save-trace <filename>         record a trace for the session and save it to a file
  -b, --browser <browserType>     browser to use, one of cr, chromium, ff, firefox, wk, webkit (default: "chromium")
  --block-service-workers         block service workers
  --channel <channel>             Chromium distribution channel, "chrome", "chrome-beta", "msedge-dev", etc
  --color-scheme <scheme>         emulate preferred color scheme, "light" or "dark"
  --device <deviceName>           emulate device, for example  "iPhone 11"
  --geolocation <coordinates>     specify geolocation coordinates, for example "37.819722,-122.478611"
  --ignore-https-errors           ignore https errors
  --load-storage <filename>       load context storage state from the file, previously saved with --save-storage
  --lang <language>               specify language / locale, for example "en-GB"
  --proxy-server <proxy>          specify proxy server, for example "http://myproxy:3128" or "socks5://myproxy:8080"
  --proxy-bypass <bypass>         comma-separated domains to bypass proxy, for example ".com,chromium.org,.domain.com"
  --save-har <filename>           save HAR file with all network activity at the end
  --save-har-glob <glob pattern>  filter entries in the HAR by matching url against this glob pattern
  --save-storage <filename>       save context storage state at the end, for later use with --load-storage
  --timezone <time zone>          time zone to emulate, for example "Europe/Rome"
  --timeout <timeout>             timeout for Playwright actions in milliseconds, no timeout by default
  --user-agent <ua string>        specify user agent string
  --viewport-size <size>          specify browser viewport size in pixels, for example "1280, 720"
  -h, --help                      display help for command

Examples:

  $ codegen
  $ codegen --target=python
  $ codegen -b webkit https://example.com



  1. video
  Visual Studio Code  ► https://bit.ly/2V15yvt
Prerequisites
Node JS
node -v   npm -v
IDE  ( VS Code )

Install using command as npm package

Step 1 - Create a new folder and open in VS Code
Step 2 - Goto Terminal and run command - npm init playwright@latest
Step 3 - Following will be added
  - package.json - node project management file
  - playwright.config.js - Configuration file
  - tests folder -  basic example test
  - tests-examples folder - detailed example tests
  - .gitignore - to be used during git commit and push
  - playwright.yml - to be used during ci cd pipeline (github workflows)
Step 4 - Check playwright added - npm playwright -v
Step 5 - Check playwright command options - npx playwright -h

Using VS Code extension 

Step 1 - Create a new folder and open in VS Code
Step 2 - Goto Extensions section and install Playwright extension from Microsoft
Step 3 - Goto View - Command Palette and type playwright - select install playwright
Step 4 - Select the browsers and click ok
Step 5 - It will install the libraries and create the project folders

2.video

00:00  Introduction
01:41  npx playwright test        runs all tests on all browsers in headless mode
04:20  npx playwright test --workers 3    runs with 3 workers in parallel
05:14  npx playwright test  one.spec.js     runs a specific test file
05:54  npx playwright test  one.spec.js  two.spec.js   runs the files specified
06:04. npx playwright test  one  two      runs files that have one or two in the file name
06:40. npx playwright test -g "check title"   runs test with the title
08:04  npx playwright test --project=chromium  runs on specific browser
08:56  npx playwright test --headed    runs tests in headed mode
09:51  npx playwright test --debug    debug tests
11:40  npx playwright test example.spec.js --debug debug specific test file
12:04  npx playwright test example.spec.js:21 --debug debug starting from specific line where test(..  starts
14:08  All commands screenshot
6.video
00:00  Intro
01:05  What is Trace Viewer
Trace Viewer is a GUI tool that helps viewing the executed test along with snapshots, timeline and other details (traces)

03:14  How to use Trace Viewer
Step 1 - Open config file and set  trace: 'on-first-retry'
It means - Collect trace when retrying the failed test for the 1st time only
Step 2 - Save and Run a test to fail 
Step 3 - Check trace.zip file created under test-results folder
Step 4 - View trace - npx playwright show-trace trace.zip

14:28  Screenshot moment
 
14:34  Trace Viewer Options
'on-first-retry'  - Record a trace only when retrying a test for the first time.
'off'       - Do not record a trace.
'on'       - Record a trace for each test. (not recommended as it's performance heavy)
'retain-on-failure' - Record a trace for each test, but remove it from successful test runs

To set trace on from command   npx playwright test --trace on

15:32  Screenshot moment

15:56  Different ways to view trace
Using command - npx playwright show-trace trace.zip
Using HTML Report
Using utility - https://trace.playwright.dev/

17:12  How to set Tracing programmatically
userMail=la.crymosa321@gmail.com
userPassword=xbc7fQ2AMBC2Kne

test.only('test demo', async ({ page, context }) =＞ {
 await context.tracing.start({snapshots: true, screenshots: true})
 // test code
 await context.tracing.stop({path: 'test-trace.zip'});
});

let context
let page
test.beforeAll(async ({ browser }) =＞ {
 context = await browser.newContext()
 await context.tracing.start({ screenshots: true, snapshots: true })
 page = await context.newPage()
})

test.afterAll(async () =＞ {
 await context.tracing.stop({ path: 'test-trace.zip' });
})

38:24  Outro